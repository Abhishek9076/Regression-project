# importing dependencies
import numpy s np
import pandas as pd
from matplotlib import pyplot as plt
from sklearn.database import load_boston

# undestanding the dataset
boston = load_boston
print(boston.DESR)

# access data atributes
dataset = boston.data
for name, index in enumerate(boston.feature_names):
    print(index,name)
    
# reshaping data
data = dataset[:,12].reshape(-1,1)

# shape of the data
np.shape(dataset)

# target values
target = boston.target.reshape(-1,1)

# shape of target
np.shape(target)

# ensuring the matplotlib is working inside the notebook
%matplotlib inline
plt.scatter(data, target, color='red')
plt(data, pred, color='green'
plt.xlabel('Lower income population')
plt.ylabel('Cost of House')
plt.show()

# regression 
from sklearn.linear_model import LinearRegression
from sklearn.linear_model import Lasso
from sklearn.linear_model import Ridge

# creating a regression model
reg = LinearRegression()

# fit the model
reg.fit(data, target)

# prediction
pred = reg.predict(data)

# ensuring the matplotlib is working inside the notebook
%matplotlib inline
plt.scatter(data, target, color='red')
plt(data, pred, color='green'
plt.xlabel('Lower income population')
plt.ylabel('Cost of House')
plt.show()

# circumventing curve issue using polynomial model
from sklearn.preprocessing import PolynomialFeatures

# to allow merging of models
from sklearn.pipeline import make_pipeline

model = make_pipeline(PolynomialFeatures(3), reg)

model.fit(data, target)

# ensuring the matplotlib is working inside the notebook
%matplotlib inline
plt.scatter(data, target, color='red')
plt(data, pred, color='green'
plt.xlabel('Lower income population')
plt.ylabel('Cost of House')
plt.show()

# r_2 metric 
from sklearn.metrics import r2_source

# predict
r2_source(predct, target)
